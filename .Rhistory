exceldata = read_excel ("GitHub/Depa2_2022_s1/Edades.xlsx")
library(multcomp)
library(nlme)
library(XLConnect)
library(XLConnectJars)
library(lme4)
library(car)
library(rJava)
library(xlsx)
library(readxl)
exceldata = read_excel ("GitHub/Depa2_2022_s1/Edades.xlsx")
## Leemos el excel
dfdata = data.frame(exceldata) ##Convertimos datos del excel a data.frame
library(xlsx)
library(readxl)
library(readxl)
exceldata = read_excel ("GitHub/Depa2_2022_s1/Edades.xlsx")
## Leemos el excel
dfdata = data.frame(exceldata) ##Convertimos datos del excel a data.frame
x<-0
y<-0
w<-0
z<-0
#Variables para suma
Largo <- nrow(dfdata) ##Definimos largo segun datos en excel
print("Lista Personas") ##Comienza el listado de personas
for (i in 1:Largo) { ## Definimos el for hasta el largo de datos de la tabla
if (dfdata[(i),(2)] >17) { #Verifica edad
print(dfdata[(i),(1:2)]) #Imprime datos segun la variable i, con sus datos de columna 1 y 2
print("Felicidades es mayor de edad")
x <- (dfdata[(i),(2)]) #Almacena edad
y <- y+x #Suma edad actual a las ya almacenadas
Sys.sleep(1)
} else if (dfdata[(i),(2)] <18 ) { #Verifica edad
print(dfdata[(i),(1:2)])
print("Aún no es mayor de edad")
w <- (dfdata[(i),(2)])
z <- w+z
Sys.sleep(1)
}
}
suma <- function(z, y) { #Funcion de suma para saber el resultado de todas las edades
return(z + y)
}
print("La suma de las edades es: ")
suma(z, y) #Imprime suma
suma <- function(z, y) { #Funcion de suma para saber el resultado de todas las edades
return(z + y)
}
print("La suma de las edades es: ")
suma(z, y) #Imprime suma
library(readxl)
exceldata = read_xlsx("Edades.xlsx")
# Leemos el excel
dfdata = data.frame(exceldata)   # Convertimos datos del excel a data.frame
verificar <- function(dfdata) {  # Funcion verificar, recibe el parametro dfdata, la base de datos
x<-0
y<-0
w<-0
z<-0
#Variables para suma
Largo <- nrow(dfdata)       # Definimos largo segun datos en excel
print("Lista Personas")     # Comienza el listado de personas
for (i in 1:Largo) {        # Definimos el for hasta el largo de datos de la tabla
if (dfdata[(i),(2)] >17) {  # Verifica edad
print(dfdata[(i),(1:2)])              # Imprime datos segun la variable i, con sus datos de columna 1 y 2
print("Felicidades es mayor de edad")
x <- (dfdata[(i),(2)])                # Almacena edad
y <- y+x                              # Suma edad actual a las ya almacenadas
Sys.sleep(1)
} else if (dfdata[(i),(2)] <18 ) {  # Verifica edad
print(dfdata[(i),(1:2)])
print("Aún no es mayor de edad")
w <- (dfdata[(i),(2)])
z <- w+z
Sys.sleep(1)
}
}
suma <- function(z, y) {                # Funcion de suma para saber el resultado de todas las edades
return(z + y)
}
edad_promedio <- ((z +y))/nrow(dfdata)  # Funcion de promedio de las edades
print(paste("La suma de las edades es: ", z + y,"y el promedio de las edades es ",edad_promedio))
}
library(readxl)
exceldata = read_xlsx("Edades.xlsx")
library(readxl)
exceldata = read_xlsx("Edades.xlsx")
library(readxl)
exceldata = read_xlsx("~/GitHub/Depa2_2022_s1/Edades.xlsx")
## Leemos el excel
dfdata = data.frame(exceldata)    # Convertimos datos del excel a data.frame
verificar <- function(dfdata) {   # Funcion verificar, recibe el parametro dfdata, la base de datos
x<-0
y<-0
w<-0
z<-0
#Variables para suma
Largo <- nrow(dfdata)         # Definimos largo segun datos en excel
print("Lista Personas")       # Comienza el listado de personas
for (i in 1:Largo) {          # Definimos el for hasta el largo de datos de la tabla
if (dfdata[(i),(2)] >17) {  # Verifica edad
print(dfdata[(i),(1:2)])              # Imprime datos segun la variable i, con sus datos de columna 1 y 2
print("Felicidades es mayor de edad")
x <- (dfdata[(i),(2)])                # Almacena edad
y <- y+x                              # Suma edad actual a las ya almacenadas
Sys.sleep(1)
} else if (dfdata[(i),(2)] <18 ) {  # Verifica edad
print(dfdata[(i),(1:2)])
print("Aún no es mayor de edad")
w <- (dfdata[(i),(2)])
z <- w+z
Sys.sleep(1)
}
}
suma <- function(z, y) {                # Funcion de suma para saber el resultado de todas las edades
return(z + y)
}
edad_promedio <- ((z +y))/nrow(dfdata)  # Funcion de promedio de las edades
print(paste("La suma de las edades es: ", z + y,"y el promedio de las edades es ",edad_promedio))
}
verificar(dfdata) # Funcion que verifica las edades, entrega una suma total y el promedio de las edades
verificar(dfdata) # Funcion que verifica las edades, entrega una suma total y el promedio de las edades
library(readxl)
exceldata = read_xlsx("~/GitHub/Depa2_2022_s1/Edades.xlsx")
## Leemos el excel
dfdata = data.frame(exceldata)    # Convertimos datos del excel a data.frame
verificar <- function(dfdata) {   # Funcion verificar, recibe el parametro dfdata, la base de datos
x<-0
y<-0
w<-0
z<-0
#Variables para suma
Largo <- nrow(dfdata)         # Definimos largo segun datos en excel
print("Lista Personas")       # Comienza el listado de personas
for (i in 1:Largo) {          # Definimos el for hasta el largo de datos de la tabla
if (dfdata[(i),(2)] >17) {  # Verifica edad
print(dfdata[(i),(1:2)])              # Imprime datos segun la variable i, con sus datos de columna 1 y 2
print("Felicidades es mayor de edad")
x <- (dfdata[(i),(2)])                # Almacena edad
y <- y+x                              # Suma edad actual a las ya almacenadas
Sys.sleep(1)
} else if (dfdata[(i),(2)] <18 ) {  # Verifica edad
print(dfdata[(i),(1:2)])
print("Aún no es mayor de edad")
w <- (dfdata[(i),(2)])
z <- w+z
Sys.sleep(1)
}
}
suma <- function(z, y) {                # Funcion de suma para saber el resultado de todas las edades
return(z + y)
}
edad_promedio <- ((z +y))/nrow(dfdata)  # Funcion de promedio de las edades
print(paste("La suma de las edades es: ", z + y,"y el promedio de las edades es ",edad_promedio))
}
verificar(dfdata) # Funcion que verifica las edades, entrega una suma total y el promedio de las edades
MinoriaEdad <- function(total,Menoredad){
if (Menoredad >= (total*0.5) {
library(readxl)
exceldata = read_xlsx("~/GitHub/Depa2_2022_s1/Edades.xlsx")
## Leemos el excel
dfdata = data.frame(exceldata)    # Convertimos datos del excel a data.frame
verificar <- function(dfdata) {   # Funcion verificar, recibe el parametro dfdata, la base de datos
y<-0
w<-0
z<-0
Largo <- nrow(dfdata)         # Definimos largo segun datos en excel
print("Lista Personas")       # Comienza el listado de personas
for (i in 1:Largo) {          # Definimos el for hasta el largo de datos de la tabla
print(dfdata[(i),(1:2)])              # Imprime datos segun la variable i, con sus datos de columna 1 y 2
print("Felicidades es mayor de edad")
x <- (dfdata[(i),(2)])                # Almacena edad
y <- y+x                              # Suma edad actual a las ya almacenadas
Sys.sleep(1)
if (dfdata[(i),(2)] >17) {  # Verifica edad
print(dfdata[(i),(1:2)])              # Imprime datos segun la variable i, con sus datos de columna 1 y 2
print("Felicidades es mayor de edad")
x <- (dfdata[(i),(2)])                # Almacena edad
y <- y+x                              # Suma edad actual a las ya almacenadas
Sys.sleep(1)
} else if (dfdata[(i),(2)] <18 ) {  # Verifica edad
print(dfdata[(i),(1:2)])
print("Aún no es mayor de edad")
w <- (dfdata[(i),(2)])
z <- w+z
MinoriaEdad <- function(total,Menoredad){
if (Menoredad >= (total*0.5) {
MinoriaEdad <- function(total,Menoredad)
{if (Menoredad >= (total*0.5)
print("Se abre nuevo taller")
print("Se abre nuevo taller")
MinoriaEdad <- function(total,Menoredad)
{if (Menoredad >= (total*0.5)
print("Se abre nuevo taller")
Sys.sleep(1)
MinoriaEdad <- function(total,Menoredad) {
if (Menoredad >= (total*0.5)
print("Se abre nuevo taller")
MinoriaEdad <- function(total,Menoredad) {
if (Menoredad >= (total*0.5)}
print("Se abre nuevo taller")
MinoriaEdad <- function(total,Menoredad) {
if (Menoredad >= (total*0.5)}
MinoriaEdad <- function(total,Menoredad) {
if (Menoredad >= (total*0.5)}
Menoresedad <- function(total) {
#Variables para suma
Largo <- nrow(dfdata)         # Definimos largo segun datos en excel
print("Lista Personas")       # Comienza el listado de personas
for (i in 1:Largo) {          # Definimos el for hasta el largo de datos de la tabla
if (dfdata[(i),(2)] >17) {  # Verifica edad
print(dfdata[(i),(1:2)])              # Imprime datos segun la variable i, con sus datos de columna 1 y 2
print("Felicidades es mayor de edad")
x <- (dfdata[(i),(2)])                # Almacena edad
y <- y+x                              # Suma edad actual a las ya almacenadas
Sys.sleep(1)
} else if (dfdata[(i),(2)] <18 ) {  # Verifica edad
print(dfdata[(i),(1:2)])
print("Aún no es mayor de edad")
w <- (dfdata[(i),(2)])
z <- w+z
Sys.sleep(1)
}
}
suma <- function(z, y) {                # Funcion de suma para saber el resultado de todas las edades
return(z + y)
}
edad_promedio <- ((z +y))/nrow(dfdata)  # Funcion de promedio de las edades
print(paste("La suma de las edades es: ", z + y,"y el promedio de las edades es ",edad_promedio))
}
Menoresedad <- function(total, menor) {
#Variables para suma
Largo <- nrow(dfdata)         # Definimos largo segun datos en excel
print("Lista Personas")       # Comienza el listado de personas
for (i in 1:Largo) {          # Definimos el for hasta el largo de datos de la tabla
if (dfdata[(i),(2)] >17) {  # Verifica edad
print(dfdata[(i),(1:2)])              # Imprime datos segun la variable i, con sus datos de columna 1 y 2
print("Felicidades es mayor de edad")
x <- (dfdata[(i),(2)])                # Almacena edad
y <- y+x                              # Suma edad actual a las ya almacenadas
Sys.sleep(1)
} else if (dfdata[(i),(2)] <18 ) {  # Verifica edad
print(dfdata[(i),(1:2)])
print("Aún no es mayor de edad")
w <- (dfdata[(i),(2)])
z <- w+z
if (Menoredad >= (total*0.5)}
if (menor >= (total*0.5)}
if (menor >= (total*0.5)}
if (menor >= (total*0.5)}
install.packages("tidyverse")
library(tidyverse)
setwd("~/GitHub/Trabajo-Uno")
set.seed(10)
sample(c("SI","NO"), 10, replace = T)
# La Funcion elecciones toma: el total, votosSI, votosNO, sin haber votos blancos, ni nulos
Elecciones <- function(total,votosSI,votosNO){
if (votosSI >= ((total*0.5)+1)) {
print("Gana opcion SI")
} else{
print("votosSI no tiene electores")
if (votosSI >= total*0.3) {
print("votosSI tiene un 30% de electores")
if (votosSI >= total*0.3 & votosNO < total*0.3) {
print("Gana opcion SI")
} else{
if (votosNO >= ((total*0.5)+1)) {
print("Gana opcion NO")
} else{
print("votosNO tiene un 30% de electores")
if (votosSI == votosNO) {
print("La cantidad de electores son iguales, Gana opcion NO porque hay empate")   # electores refiere al quorum
print("La cantidad de electores son iguales, Gana opción SI porque hay empate")
} else{
if (votosSI > votosNO) {
print("Gana opcion SI")
} else{
print("Gana opcion NO")
}
}
}
}
} else{
print("Gana opcion NO")
}
}
}
Elecciones(10,6,4)
elecciones_solo_total <- function(total){
# Para cacular los votosSi y votosNO se necesita una semilla"(seed) aleatoria.
set.seed(total)
padron <- sample(c("SI","NO"),total,replace = TRUE)
padron <- as.data.frame(padron)
names(padron) <- c("votos")
votosSI <- sum(with(padron,votos == "SI"))
votosNO <- sum(with(padron,votos == "NO"))
if (votosSI >= ((total*0.5)+1)) {
print("Gana opcion SI")
} else{
print("votosSI no tiene electores")
if (votosSI >= total*0.3) {
print("votosSI tiene un 30% de electores")
if (votosSI >= total*0.3 & votosNO < total*0.3) {
print("Gana opcion SI")
} else{
if (votosNO >= ((total*0.5)+1)) {
print("Gana opcion NO")
} else{
print("votosNO tiene un 30% de electores")
if (votosSI == votosNO) {
print("La cantidad de electores son iguales, Gana opción SI porque hay empate")
} else{
if (votosSI > votosNO) {
print("Gana opcion SI")
} else{
print("Gana opcion NO")
}
}
}
}
} else{
print("Gana opcion NO")
}
}
}
# Se realiza la funcion,  se debe ingresar los 10 votos que se indican en el ejercicio.
elecciones_solo_total(10)
# La Funcion elecciones toma: el total, votosSI, votosNO, sin haber votos blancos, ni nulos
Elecciones <- function(total,votosSI,votosNO){
if (votosSI >= ((total*0.5)+1)) {
print("Gana opcion SI")
} else{
print("votosSI no tiene electores")
if (votosSI >= total*0.3) {
print("votosSI tiene un 30% de electores")
if (votosSI >= total*0.3 & votosNO < total*0.3) {
print("Gana opcion SI")
} else{
if (votosNO >= ((total*0.5)+1)) {
print("Gana opcion NO")
} else{
print("votosNO tiene un 30% de electores")
if (votosSI == votosNO) {
print("La cantidad de electores son iguales, Gana opcion NO porque hay empate")   # electores refiere al quorum
print("La cantidad de electores son iguales, Gana opción SI porque hay empate")
} else{
if (votosSI > votosNO) {
print("Gana opcion SI")
} else{
print("Gana opcion NO")
}
}
}
}
} else{
print("Gana opcion NO")
}
}
}
Elecciones(10,6,4)
elecciones_solo_total <- function(total){
# Para cacular los votosSi y votosNO se necesita una semilla"(seed) aleatoria.
set.seed(total)
padron <- sample(c("SI","NO"),total,replace = TRUE)
padron <- as.data.frame(padron)
names(padron) <- c("votos")
votosSI <- sum(with(padron,votos == "SI"))
votosNO <- sum(with(padron,votos == "NO"))
if (votosSI >= ((total*0.5)+1)) {
print("Gana opcion SI")
} else{
print("votosSI no tiene electores")
if (votosSI >= total*0.3) {
print("votosSI tiene un 30% de electores")
if (votosSI >= total*0.3 & votosNO < total*0.3) {
print("Gana opcion SI")
} else{
if (votosNO >= ((total*0.5)+1)) {
print("Gana opcion NO")
} else{
print("votosNO tiene un 30% de electores")
if (votosSI == votosNO) {
print("La cantidad de electores son iguales, Gana opción SI porque hay empate")
} else{
if (votosSI > votosNO) {
print("Gana opcion SI")
} else{
print("Gana opcion NO")
}
}
}
}
} else{
print("Gana opcion NO")
}
}
}
# Se realiza la funcion,  se debe ingresar los 10 votos que se indican en el ejercicio.
elecciones_solo_total(10)
setwd("~/GitHub/Trabajo-Uno")
set.seed(10)
sample(c("SI","NO"), 10, replace = T)
# La Funcion elecciones toma: el total, votosSI, votosNO, sin haber votos blancos, ni nulos
Elecciones <- function(total,votosSI,votosNO){
if (votosSI >= ((total*0.5)+1)) {
print("Gana opcion SI")
} else{
print("votosSI no tiene electores")
if (votosSI >= total*0.3) {
print("votosSI tiene un 30% de electores")
if (votosSI >= total*0.3 & votosNO < total*0.3) {
print("Gana opcion SI")
} else{
if (votosNO >= ((total*0.5)+1)) {
print("Gana opcion NO")
} else{
print("votosNO tiene un 30% de electores")
if (votosSI == votosNO) {
print("La cantidad de electores son iguales, Gana opcion NO porque hay empate")   # electores refiere al quorum
print("La cantidad de electores son iguales, Gana opción SI porque hay empate")
} else{
if (votosSI > votosNO) {
print("Gana opcion SI")
} else{
print("Gana opcion NO")
}
}
}
}
} else{
print("Gana opcion NO")
}
}
}
Elecciones(10,6,4)
elecciones_solo_total <- function(total){
# Para cacular los votosSi y votosNO se necesita una semilla"(seed) aleatoria.
set.seed(total)
padron <- sample(c("SI","NO"),total,replace = TRUE)
padron <- as.data.frame(padron)
names(padron) <- c("votos")
votosSI <- sum(with(padron,votos == "SI"))
votosNO <- sum(with(padron,votos == "NO"))
if (votosSI >= ((total*0.5)+1)) {
print("Gana opcion SI")
} else{
print("votosSI no tiene electores")
if (votosSI >= total*0.3) {
print("votosSI tiene un 30% de electores")
if (votosSI >= total*0.3 & votosNO < total*0.3) {
print("Gana opcion SI")
} else{
if (votosNO >= ((total*0.5)+1)) {
print("Gana opcion NO")
} else{
print("votosNO tiene un 30% de electores")
if (votosSI == votosNO) {
print("La cantidad de electores son iguales, Gana opción SI porque hay empate")
} else{
if (votosSI > votosNO) {
print("Gana opcion SI")
} else{
print("Gana opcion NO")
}
}
}
}
} else{
print("Gana opcion NO")
}
}
}
# Se realiza la funcion,  se debe ingresar los 10 votos que se indican en el ejercicio.
elecciones_solo_total(10)
listaDocumentos <- list(c("mp","Juan","Christofer"),c("of","av01","ampr"),c("of","av01","ante"),
c("of","av08","arme"),c("of","av02","ante"),c("of","av07","ampr"),
c("of","av03","dape"),c("of","av01","meca"),c("of","av02","dape"),
c("mp","Antonia"),c("mp","Christian","Mario"),
c("mp","Jose","Pedro","Antonela"),c("of","av05","meca"),
c("of","av04","dape"),c("of","av02","arme"))
CantidadNiños <- list()
for(elemento in listaDocumentos){
if(elemento[1] == "mp"){
# variable que nos dice si detecto o no la CantidadNiños
detecto <- F
# viendo si hay datos en CantidadNiños
if(length(CantidadNiños) != 0){
# repaso de datos guardados de CantidadNiños
for (posicionCantidadNiños in 1:length(CantidadNiños)) {
# rescatar elementos
CantidadNiñosunlist <- unlist(CantidadNiños[posicionCantidadNiños])
# se revisa si existe la CantidadNiños para actualizarlos
if(CantidadNiñosunlist[1] == (length(elemento)-1)){
CantidadNiñosunlist[2] <- CantidadNiñosunlist[2]+1
CantidadNiños[posicionCantidadNiños] <- list(c(CantidadNiñosunlist))
detecto <- T
}
}
}
# se genera una nueva CantidadNiños
if(!detecto){
nuevaCantidadNiños <- c()
nuevaCantidadNiños[1] <- (length(elemento)-1)
nuevaCantidadNiños[2] <- 1
CantidadNiños <- c(CantidadNiños,list(c(nuevaCantidadNiños)))
}
}
}
for (CantidadNiños in CantidadNiños) {
print(paste("Se cuentan con",CantidadNiños[2],"mp de",CantidadNiños[1],"niños"))
}
